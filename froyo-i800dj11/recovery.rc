on init

sysclktz 0

loglevel 3

# setup the global environment
    export PATH /sbin:/system/sbin:/system/bin:/system/xbin
    export LD_LIBRARY_PATH /system/lib
    export ANDROID_BOOTLOGO 1
    export ANDROID_ROOT /system
    export ANDROID_ASSETS /system/app
    export ANDROID_DATA /data

    export EXTERNAL_STORAGE /mnt/sdcard

    export ASEC_MOUNTPOINT /mnt/asec

    export BOOTCLASSPATH /system/framework/core.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/android.policy.jar:/system/framework/services.jar

    # ko files for 3D
    insmod /modules/pvrsrvkm.ko
    insmod /modules/s3c_lcd.ko
    insmod /modules/s3c_bc.ko


#add booting sound property 
#	setprop audioflinger.bootsnd 1

# Backward compatibility
    symlink /system/etc /etc
    symlink /sys/kernel/debug /d

# create mountpoints
    mkdir /mnt 0775 root system
    mkdir /mnt/sdcard 0000 system system
    mkdir /mnt/apk	0000 system system

# Create cgroup mount point for cpu accounting
    mkdir /acct
    mount cgroup none /acct cpuacct
    mkdir /acct/uid
    
    mkdir /tmp
    mount tmpfs nodev /tmp

    insmod /lib/modules/fsr.ko
    insmod /lib/modules/fsr_stl.ko
    insmod /lib/modules/rfs_glue.ko
    insmod /lib/modules/rfs_fat.ko

# parameter block
    mkdir /mnt/.lfs 0755 root root
    insmod /lib/modules/j4fs.ko
    mount j4fs /dev/block/stl6 /mnt/.lfs
    insmod /lib/modules/param.ko

# dpram_recovery module
    insmod /lib/modules/dpram_recovery.ko
   
# Backwards Compat - XXX: Going away in G*
    symlink /mnt/sdcard /sdcard

    mkdir /system
    mkdir /data 0771 system system
    mkdir /efs 0771 system system
    chown system system /efs
    chmod 0771 /efs
    mkdir /cache 0770 system cache
    mkdir /config 0500 root root

    # Directory for putting things only root should see.
    mkdir /mnt/secure 0700 root root

    # Directory for staging bindmounts
    mkdir /mnt/secure/staging 0700 root root

    # Directory-target for where the secure container
    # imagefile directory will be bind-mounted
    mkdir /mnt/secure/asec  0700 root root

    # Secure container public mount points.
    mkdir /mnt/asec  0700 root system
    mount tmpfs tmpfs /mnt/asec mode=0755,gid=1000

    # mount rootfs rootfs / ro remount

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/kernel/hung_task_timeout_secs 0
    write /proc/cpu/alignment 4
    write /proc/sys/kernel/sched_latency_ns 10000000
    write /proc/sys/kernel/sched_wakeup_granularity_ns 2000000
    write /proc/sys/kernel/sched_compat_yield 1
    write /proc/sys/kernel/sched_child_runs_first 0

# Create cgroup mount points for process groups
    mkdir /dev/cpuctl
    mount cgroup none /dev/cpuctl cpu
    chown system system /dev/cpuctl
    chown system system /dev/cpuctl/tasks
    chmod 0777 /dev/cpuctl/tasks
    write /dev/cpuctl/cpu.shares 1024

    mkdir /dev/cpuctl/fg_boost
    chown system system /dev/cpuctl/fg_boost/tasks
    chmod 0777 /dev/cpuctl/fg_boost/tasks
    write /dev/cpuctl/fg_boost/cpu.shares 1024

    mkdir /dev/cpuctl/bg_non_interactive
    chown system system /dev/cpuctl/bg_non_interactive/tasks
    chmod 0777 /dev/cpuctl/bg_non_interactive/tasks
    # 5.0 %
    write /dev/cpuctl/bg_non_interactive/cpu.shares 52

# mount mtd partitions
    # Mount /system rw first to give the filesystem a chance to save a checkpoint
    #mount yaffs2 mtd@system /system
    mount rfs /dev/block/stl9 /system check=no
    #mount yaffs2 mtd@system /system ro remount

# use movinand second partition as /data. d.moskvitin
    exec apply_disk_policy

    # We chown/chmod /data again so because mount is run as root + defaults
    # mount yaffs2 mtd@userdata /data nosuid nodev
    #mkdir /data
    #mount rfs /dev/block/stl10 /data nosuid nodev check=no
    #chown system system /data
    #chmod 0771 /data

    # Create dump dir and collect dumps.
    # Do this before we mount cache so eventually we can use cache for
    # storing dumps on platforms which do not have a dedicated dump partition.

    mkdir /data/dontpanic
    chown root log /data/dontpanic
    chmod 0750 /data/dontpanic

    # Collect apanic data, free resources and re-arm trigger
    copy /proc/apanic_console /data/dontpanic/apanic_console
    chown root log /data/dontpanic/apanic_console
    chmod 0640 /data/dontpanic/apanic_console

    copy /proc/apanic_threads /data/dontpanic/apanic_threads
    chown root log /data/dontpanic/apanic_threads
    chmod 0640 /data/dontpanic/apanic_threads

    write /proc/apanic_console 1

    # Same reason as /data above
    #mount yaffs2 mtd@cache /cache nosuid nodev
    #mount rfs /dev/block/stl11 /cache nosuid nodev check=no
    #chown system cache /cache
    #chmod 0770 /cache

    # This may have been created by the recovery system with odd permissions
    chown system cache /cache/recovery
    chmod 0770 /cache/recovery

    mount rfs /dev/block/stl3 /efs nosuid nodev check=no

    #chown system system /efs
    chown radio radio /efs
    chmod 0771 /efs

    #change permissions on vmallocinfo so we can grab it from bugreports
    chown root log /proc/vmallocinfo
    chmod 0440 /proc/vmallocinfo

    
    chmod 0666 /dev/log/radio
    chmod 0666 /dev/log/main
    chmod 0666 /dev/log/event    
    	

on boot
# basic network init
    ifup lo
    hostname localhost
    domainname localdomain


    class_start default

#    write /sys/class/sec/switch/usb_sel "pda"
#    write /sys/class/sec/switch/uart_sel "pda"

## Daemon processes to be run by init.
##
service console /system/bin/sh
    console

# P1_VZW
#SDCARD is used for FOTA update in recovery mode.
#This is dependent on partition id decided by boot.
#service vold /system/bin/vold
#    socket vold stream 0660 root mount

service recovery /system/bin/recovery
    oneshot

# adbd is controlled by the persist.service.adb.enable system property
service adbd /sbin/adbd recovery

on property:persist.service.adb.enable=1
    start adbd

on property:persist.service.adb.enable=0
    stop adbd

